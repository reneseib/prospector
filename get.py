import sys
import os
import numpy as np
import numba
from numba import njit, typeof
from numba.core import types
from numba.typed import Dict, List
import timeit
import fiona
from itertools import chain

geo_file = "/common/ecap/prospector_data/results/stages/3-filtered_by_intersection_protected_area/saarland/gpkg/saarland-3-filtered_by_intersection_protected_area.gpkg"

nested_array = np.array([[]]).astype(np.float64)

int_arr_dict = Dict.empty(key_type=types.int64, value_type=typeof(nested_array))


str_arr_dict = Dict.empty(
    key_type=types.unicode_type,
    value_type=typeof(int_arr_dict),
)

data_dict = Dict.empty(
    key_type=types.int64,
    value_type=typeof(str_arr_dict),
)

with fiona.open(geo_file) as geo:
    geo = dict(geo)

    data_keys = list(geo.keys())
    geometries = {}
    for k in data_keys:
        coords = geo[k]["geometry"]["coordinates"]
        geometries[k] = coords

    for key in data_keys:
        geom = geometries[key]
        geom = list(chain(*geom))

        int_arr_dict = int_arr_dict.copy()

        str_arr_dict = str_arr_dict.copy()

        if type(geom[0]) != list:
            geom = np.array([np.array(x).astype(np.float64) for x in geom]).astype(
                np.float64
            )
            int_arr_dict[0] = geom

        else:
            geom = [np.array(x).astype(np.float64) for x in geom]
            for i in range(len(geom)):
                g = geom[i]

                print(typeof(g))
                print(typeof(nested_array))
                print(typeof(g) == typeof(nested_array))

                int_arr_dict[i] = g

        str_arr_dict["geometry"] = int_arr_dict

        data_dict[key] = str_arr_dict

print(data_dict)
#
# t1 = timeit.default_timer()
# # The Dict.empty() constructs a typed dictionary.
# # The key and value typed must be explicitly declared.
# d = Dict.empty(
#     key_type=types.int64,
#     value_type=types.float64[:],
# )
#
# dictionary = {}
#
# len = 100000
#
#
# keys = np.array([i for i in range(len)]).astype(np.int64)
#
#
# @njit
# def typed_test(d, len, keys):
#     for i in range(len):
#         key = keys[i]
#         d[key] = np.asarray(
#             [
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#             ]
#         ).astype(np.float64)
#
#     for i in range(len):
#         key = keys[i]
#         arr = d[key]
#         for elem in arr:
#             np.sqrt(elem * i ** 3)
#
#
# def reg_test(dictionary, len, keys):
#     for i in range(len):
#         key = keys[i]
#         dictionary[key] = np.asarray(
#             [
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#                 0.4 * i,
#                 0.1 * i,
#                 0.8 * i,
#             ]
#         ).astype(np.float64)
#
#     for i in range(len):
#         key = keys[i]
#         arr = dictionary[key]
#         for elem in arr:
#             np.sqrt(elem * i ** 3)
#
#
# typed_test(d, len, keys)
# # reg_test(dictionary, len, keys)
#
# t2 = timeit.default_timer() - t1
# print(t2)
# # for key in d.keys():
# #     print(d[key])
#
#
# # from numba import njit, typeof, typed, types
# # from numba.typed import Dict
# # import numpy as np
# # from itertools import chain
# #
# # str_arr_dict = Dict.empty(
# #     key_type=types.int64,
# #     value_type=types.float64[:],
# # )
# #
# # master_dict = Dict.empty(key_type=types.int64, value_type=typeof(str_arr_dict))
# #
# # keys = [i for i in range(10)]
# #
# #
# # for k in keys:
# #     str_arr_dict[k] = np.random.uniform(5, 10, [4, 2]).astype(np.float64)
# #     # master_dict[k] = str_arr_dict[k]
# #
# # print(master_dict)
#
# #
# #
# # float_array = types.float64[:]
# #
# # d1 = typed.Dict.empty(
# #     key_type=types.unicode_type,
# #     value_type=float_array,
# # )
# # d2 = typed.Dict.empty(
# #     key_type=types.unicode_type,
# #     value_type=typeof(d1),  # base the d2 instance values of the type of d1
# # )
# #
# # d3 = typed.Dict.empty(key_type=types.int64, value_type=typeof(d2))
# # #
# #
# # d1["bla"] = np.array([4.312323, 2.123784, 8.234234])
# # d1["asdasd"] = np.array(
# #     [
# #         [681545.89763492, 5307954.42966082],
# #         [681658.73936926, 5308028.02175132],
# #         [681778.26691051, 5308100.63661552],
# #         [681922.25922828, 5308189.65560184],
# #         [682033.38431816, 5308259.28561563],
# #         [682044.97442753, 5308263.93435683],
# #         [682071.59220517, 5308265.51993525],
# #         [682172.85302116, 5308128.93855267],
# #         [682253.01987149, 5307893.24053291],
# #         [682276.19386866, 5307814.94452642],
# #         [682312.40956315, 5307753.88097558],
# #         [682340.53494646, 5307708.55887633],
# #         [682373.01644141, 5307662.23991384],
# #         [682449.84440712, 5307565.17193026],
# #         [682528.0674794, 5307476.3477325],
# #         [682597.42001567, 5307382.54915743],
# #         [682697.13040599, 5307249.23049568],
# #         [682700.61419995, 5307227.58127765],
# #         [682695.00337947, 5307213.38671642],
# #         [682688.80435543, 5307203.58996651],
# #         [682660.64275079, 5307200.27314114],
# #         [682607.70194591, 5307195.98298851],
# #         [682554.0166277, 5307275.51507749],
# #         [682468.92577277, 5307269.85294713],
# #         [682488.80525451, 5307218.04090031],
# #         [682457.85543382, 5307217.48473919],
# #         [682466.41004736, 5307189.24323938],
# #         [682390.72792525, 5307188.38532612],
# #         [682232.8333549, 5307206.05637191],
# #         [682120.12331712, 5307222.28774038],
# #         [681873.32289339, 5307252.61448727],
# #         [681793.53364954, 5307266.98655964],
# #         [681744.2949936, 5307286.27121937],
# #         [681715.16943735, 5307286.48844763],
# #         [681650.346212, 5307276.57095892],
# #         [681584.43046351, 5307254.29400097],
# #         [681494.51533481, 5307245.25724685],
# #         [681455.86541645, 5307492.1373196],
# #         [681464.76693692, 5307587.78663641],
# #         [681282.76405437, 5307599.41819804],
# #         [681258.7905385, 5307598.82060034],
# #         [681252.91306939, 5307594.20842851],
# #         [681151.16666394, 5307614.75174661],
# #         [681164.79815508, 5307669.27754866],
# #         [681174.57916115, 5307667.27087535],
# #         [681184.92028838, 5307720.31398606],
# #         [681281.13844521, 5307705.66039842],
# #         [681284.66018063, 5307729.99994176],
# #         [681259.98538574, 5307732.92894025],
# #         [681270.55640875, 5307788.14873721],
# #         [681292.92121388, 5307799.44200602],
# #         [681314.26923205, 5307812.61679697],
# #         [681545.89763492, 5307954.42966082],
# #     ]
# # )
# #
# #
# # print(d1)
#
# #
# # print("d1's Numba type is", typeof(d1))
# # # d1 is an instance so you can use it like a dict
# # d1["bla"] = 6.0
# # print(d1)
# #
# #
# # @njit
# # def foo(d2):
# #     d2["bla"] = {9.0: 3.0}
# #     return d2
# #
# #
# # print("Using d2")
# # print(foo(d1))
# #
# # # you can also spell it like this:
# # d1_type = types.DictType(types.float64, types.float64)
# # d3 = typed.Dict.empty(types.float64, d1_type)
# #
# # print("Using d3")
# # print(foo(d3))
